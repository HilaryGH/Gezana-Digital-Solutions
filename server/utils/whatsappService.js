const twilio = require('twilio');

// Initialize Twilio client
const createTwilioClient = () => {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  
  if (!accountSid || !authToken) {
    console.warn('‚ö†Ô∏è Twilio credentials not configured');
    return null;
  }
  
  return twilio(accountSid, authToken);
};

// Format phone number for WhatsApp
const formatPhoneNumber = (phone) => {
  // If already formatted with whatsapp: prefix, return as is
  if (phone.startsWith('whatsapp:')) {
    return phone;
  }
  
  // Remove any spaces, dashes, or special characters
  let formatted = phone.replace(/[\s\-\(\)]/g, '');
  
  // Add 'whatsapp:' prefix and ensure it starts with +
  if (!formatted.startsWith('+')) {
    formatted = '+' + formatted;
  }
  
  return 'whatsapp:' + formatted;
};

// Send welcome WhatsApp message
const sendWelcomeWhatsApp = async (phoneNumber, userName, userRole) => {
  try {
    const client = createTwilioClient();
    
    if (!client) {
      console.log('‚ö†Ô∏è Twilio not configured, skipping WhatsApp notification');
      return { success: false, error: 'Twilio not configured' };
    }

    const message = userRole === 'provider' 
      ? `üéâ *Welcome to Gezana, ${userName}!*

Your Provider account is now active! üöÄ

‚úÖ Start adding your services
üí∞ Set your own pricing
üìä Manage bookings easily
‚≠ê Build your reputation

Get started now: ${process.env.CLIENT_URL || 'http://localhost:5173'}

Need help? Reply to this message or call +251 911 508 734

_Gezana Digital Solutions - Connecting Services, Building Trust_ ü§ù`
      : `üéâ *Welcome to Gezana, ${userName}!*

Your account is ready! üåü

üîç Browse verified services
üìÖ Book at your convenience
‚≠ê Rate and review providers
üéÅ Earn loyalty points

Explore services: ${process.env.CLIENT_URL || 'http://localhost:5173'}

Need help? Reply to this message or call +251 911 508 734

_Gezana Digital Solutions - Your Trusted Service Marketplace_ üíº`;

    const response = await client.messages.create({
      from: formatPhoneNumber(process.env.TWILIO_WHATSAPP_NUMBER || process.env.TWILIO_PHONE_NUMBER),
      to: formatPhoneNumber(phoneNumber),
      body: message
    });

    console.log('‚úÖ Welcome WhatsApp sent successfully:', response.sid);
    return { success: true, messageSid: response.sid };
  } catch (error) {
    console.error('‚ùå Error sending WhatsApp message:', error.message);
    return { success: false, error: error.message };
  }
};

// Send service published WhatsApp notification
const sendServicePublishedWhatsApp = async (phoneNumber, userName, serviceName) => {
  try {
    const client = createTwilioClient();
    
    if (!client) {
      console.log('‚ö†Ô∏è Twilio not configured, skipping WhatsApp notification');
      return { success: false, error: 'Twilio not configured' };
    }

    const message = `üéä *Service Published Successfully!*

Hi ${userName},

Your service *"${serviceName}"* is now live on Gezana! üåü

Customers can now:
‚úÖ View your service
üìÖ Book appointments
üí¨ Contact you directly

Track your bookings: ${process.env.CLIENT_URL || 'http://localhost:5173'}/provider/dashboard

_Keep your service updated for better visibility!_ üìà

Gezana - Your Partner in Success üöÄ`;

    const response = await client.messages.create({
      from: formatPhoneNumber(process.env.TWILIO_WHATSAPP_NUMBER || process.env.TWILIO_PHONE_NUMBER),
      to: formatPhoneNumber(phoneNumber),
      body: message
    });

    console.log('‚úÖ Service published WhatsApp sent:', response.sid);
    return { success: true, messageSid: response.sid };
  } catch (error) {
    console.error('‚ùå Error sending WhatsApp message:', error.message);
    return { success: false, error: error.message };
  }
};

// Send booking confirmation WhatsApp
const sendBookingConfirmationWhatsApp = async (phoneNumber, userName, bookingDetails) => {
  try {
    const client = createTwilioClient();
    
    if (!client) {
      console.log('‚ö†Ô∏è Twilio not configured, skipping WhatsApp notification');
      return { success: false, error: 'Twilio not configured' };
    }

    const message = `üìÖ *Booking Confirmed!*

Hi ${userName},

Your booking has been confirmed! üéâ

*Service:* ${bookingDetails.serviceName}
*Provider:* ${bookingDetails.providerName}
*Date:* ${bookingDetails.date}
*Time:* ${bookingDetails.time}
*Total:* ${bookingDetails.price} ETB

View details: ${process.env.CLIENT_URL || 'http://localhost:5173'}/bookings

_We'll notify you before your appointment_ ‚è∞

Questions? Reply to this message!

Gezana - Service Made Simple üíº`;

    const response = await client.messages.create({
      from: formatPhoneNumber(process.env.TWILIO_WHATSAPP_NUMBER || process.env.TWILIO_PHONE_NUMBER),
      to: formatPhoneNumber(phoneNumber),
      body: message
    });

    console.log('‚úÖ Booking confirmation WhatsApp sent:', response.sid);
    return { success: true, messageSid: response.sid };
  } catch (error) {
    console.error('‚ùå Error sending WhatsApp message:', error.message);
    return { success: false, error: error.message };
  }
};

// Send booking reminder WhatsApp
const sendBookingReminderWhatsApp = async (phoneNumber, userName, bookingDetails) => {
  try {
    const client = createTwilioClient();
    
    if (!client) {
      return { success: false, error: 'Twilio not configured' };
    }

    const message = `‚è∞ *Booking Reminder*

Hi ${userName},

Your appointment is tomorrow! üìÖ

*Service:* ${bookingDetails.serviceName}
*Provider:* ${bookingDetails.providerName}
*Time:* ${bookingDetails.time}
*Location:* ${bookingDetails.location || 'TBD'}

Please be on time! ‚åö

Need to reschedule? Contact us ASAP.

Gezana - Your Service Partner ü§ù`;

    const response = await client.messages.create({
      from: formatPhoneNumber(process.env.TWILIO_WHATSAPP_NUMBER || process.env.TWILIO_PHONE_NUMBER),
      to: formatPhoneNumber(phoneNumber),
      body: message
    });

    console.log('‚úÖ Booking reminder WhatsApp sent:', response.sid);
    return { success: true, messageSid: response.sid };
  } catch (error) {
    console.error('‚ùå Error sending WhatsApp reminder:', error.message);
    return { success: false, error: error.message };
  }
};

module.exports = {
  sendWelcomeWhatsApp,
  sendServicePublishedWhatsApp,
  sendBookingConfirmationWhatsApp,
  sendBookingReminderWhatsApp,
  formatPhoneNumber
};

